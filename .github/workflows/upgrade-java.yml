name: Upgrade Java 17 → 21

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  upgrade:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install SDKMAN!
        shell: bash
        run: |
          set -euo pipefail
          curl -s https://get.sdkman.io | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk version

      - name: Install latest Java 21 (Temurin) via SDKMAN
        id: jdk
        shell: bash
        run: |
          set -euo pipefail
          source "$HOME/.sdkman/bin/sdkman-init.sh"

          # Récupère l’identifiant Temurin 21 le plus récent
          CANDIDATE=$(sdk list java \
            | awk '/[[:space:]]21(\.[0-9]+)*-tem[[:space:]]/ {print $NF}' \
            | sed 's/[^[:alnum:].-]//g' \
            | sort -V | tail -n1)

          if [[ -z "${CANDIDATE:-}" ]]; then
            echo "Impossible de trouver un candidat Java 21 Temurin via SDKMAN." >&2
            sdk list java | sed -n '1,200p'
            exit 1
          fi

          echo "Installing Java ${CANDIDATE}"
          sdk install java "$CANDIDATE"
          sdk default java "$CANDIDATE"
          java -version

          echo "candidate=$CANDIDATE" >> "$GITHUB_OUTPUT"

      - name: Update references from 17 to 21 in XML/YML/SH
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          # Sélection des fichiers suivis par git
          mapfile -d '' FILES < <(git ls-files -z '*.xml' '*.yml' '*.yaml' '*.sh')
          echo "Fichiers trouvés: ${#FILES[@]}"

          for f in "${FILES[@]}"; do
            # XML (Maven/Toolchains/Release)
            sed -E -i \
              -e 's#(<java\.version>\s*)17(\s*</java\.version>)#\121\2#g' \
              -e 's#(<maven\.compiler\.source>\s*)17(\s*</maven\.compiler\.source>)#\121\2#g' \
              -e 's#(<maven\.compiler\.target>\s*)17(\s*</maven\.compiler\.target>)#\121\2#g' \
              -e 's#(<source>\s*)17(\s*</source>)#\121\2#g' \
              -e 's#(<target>\s*)17(\s*</target>)#\121\2#g' \
              -e 's#(<release>\s*)17(\s*</release>)#\121\2#g' \
              -e 's#(<maven\.toolchain\.java\.version>\s*)17(\s*</maven\.toolchain\.java\.version>)#\121\2#g' \
              "$f"

            # YAML/YML (setup-java, variables)
            sed -E -i \
              -e 's#(java[_-]?version:\s*["'\''"]?)17(["'\''"]?)#\121\2#gI' \
              -e 's#(java-version:\s*\[)([^]]*?)17([^]]*?\])#\121\3#gI' \
              -e 's#(JAVA_VERSION:\s*["'\''"]?)17(["'\''"]?)#\121\2#g' \
              -e 's#(JDK_VERSION:\s*["'\''"]?)17(["'\''"]?)#\121\2#g' \
              "$f"

            # Scripts shell (variables et SDKMAN)
            sed -E -i \
              -e 's#(JAVA_VERSION=)17\b#\121#g' \
              -e 's#(JDK_VERSION=)17\b#\121#g' \
              -e 's#(sdk\s+install\s+java\s+)17(\S*)#\121\2#g' \
              -e 's#(sdk\s+use\s+java\s+)17(\S*)#\121\2#g' \
              "$f"

            # Gradle (souvent dans .sh/.yml/.xml)
            sed -E -i \
              -e 's#(sourceCompatibility\s*=\s*)17\b#\121#g' \
              -e 's#(targetCompatibility\s*=\s*)17\b#\121#g' \
              -e 's#(java\.toolchain\.languageVersion\s*=\s*JavaLanguageVersion\.of\()\s*17(\))#\121\2#g' \
              "$f"
          done

          echo "Diff:"
          git status --porcelain || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: upgrade Java references from 17 to 21"
          branch: chore/java-21-upgrade
          title: "Upgrade Java 17 → 21"
          body: |
            - Met à jour les références Java **17 → 21** dans les fichiers *.xml*, *.yml*/*.yaml* et *.sh*.
            - Installe une version **Java 21 Temurin valide via SDKMAN** (détectée automatiquement).
            - Candidate installé : `${{ steps.jdk.outputs.candidate }}`.
